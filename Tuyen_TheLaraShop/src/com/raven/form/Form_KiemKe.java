/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.raven.form;

import java.io.BufferedOutputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import qlsmp.DAO.ChiTietKiemKeDAO;
import qlsmp.DAO.KiemKeDAO;
import qlsmp.DAO.SanPhamDAO;
import qlsmp.Model.ChiTietKiemKe;
import qlsmp.Model.KiemKe;

/**
 *
 * @author My Laptop
 */
public class Form_KiemKe extends javax.swing.JPanel {

    KiemKeDAO daoKK = new KiemKeDAO();
    ChiTietKiemKeDAO daoCTKK = new ChiTietKiemKeDAO();
    SanPhamDAO daoSP = new SanPhamDAO();
    int row = -1;
    List<KiemKe> list = new ArrayList<>();

    public Form_KiemKe() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnThem = new javax.swing.JButton();
        btnXoa = new javax.swing.JButton();
        btnSua = new javax.swing.JButton();
        btnRestart = new javax.swing.JButton();
        btnRestart1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblKiemKe = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblChiTiet = new javax.swing.JTable();

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnThem.setBackground(new java.awt.Color(11, 52, 106));
        btnThem.setForeground(new java.awt.Color(255, 255, 255));
        btnThem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/add.png"))); // NOI18N
        btnThem.setText("Thêm");
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });

        btnXoa.setBackground(new java.awt.Color(11, 52, 106));
        btnXoa.setForeground(new java.awt.Color(255, 255, 255));
        btnXoa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/trash.png"))); // NOI18N
        btnXoa.setText("Xóa");
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });

        btnSua.setBackground(new java.awt.Color(11, 52, 106));
        btnSua.setForeground(new java.awt.Color(255, 255, 255));
        btnSua.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/view.png"))); // NOI18N
        btnSua.setText("Xem");
        btnSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaActionPerformed(evt);
            }
        });

        btnRestart.setBackground(new java.awt.Color(11, 52, 106));
        btnRestart.setFont(new java.awt.Font("Roboto Condensed", 0, 12)); // NOI18N
        btnRestart.setForeground(new java.awt.Color(255, 255, 255));
        btnRestart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/restart.png"))); // NOI18N
        btnRestart.setText("Làm mới");
        btnRestart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRestartActionPerformed(evt);
            }
        });

        btnRestart1.setBackground(new java.awt.Color(11, 52, 106));
        btnRestart1.setFont(new java.awt.Font("Roboto Condensed", 0, 12)); // NOI18N
        btnRestart1.setForeground(new java.awt.Color(255, 255, 255));
        btnRestart1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/excel.png"))); // NOI18N
        btnRestart1.setText("Print to Excel");
        btnRestart1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRestart1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnThem, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSua, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnXoa, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addComponent(btnRestart1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRestart, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btnRestart1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnThem, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnSua, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnXoa, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnRestart, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(10, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tblKiemKe.setAutoCreateRowSorter(true);
        tblKiemKe.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID kiểm kê", "Ngày", "Kỳ kiểm kê", "Mục đích", "Kết luận", "Đã xử lý"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblKiemKe.setAutoscrolls(false);
        tblKiemKe.setFocusable(false);
        tblKiemKe.setSelectionBackground(new java.awt.Color(11, 52, 106));
        tblKiemKe.setUpdateSelectionOnSort(false);
        tblKiemKe.setVerifyInputWhenFocusTarget(false);
        tblKiemKe.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblKiemKeMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblKiemKe);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 315, Short.MAX_VALUE)
        );

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        jTabbedPane1.setBackground(new java.awt.Color(255, 255, 255));
        jTabbedPane1.setOpaque(true);

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        tblChiTiet.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã SP", "Tên SP", "Màu SP", "Theo số kế toán", "Theo số kiểm kê", "Chênh lệch", "Loại xử lý"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblChiTiet.setEnabled(false);
        tblChiTiet.setSelectionBackground(new java.awt.Color(175, 207, 255));
        jScrollPane3.setViewportView(tblChiTiet);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 851, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Chi tiết", jPanel4);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jTabbedPane1)
                .addGap(0, 0, 0))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
        new Form_SetNgayKiemKe().setVisible(true);
    }//GEN-LAST:event_btnThemActionPerformed

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        int option = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn xóa kiểm kê này?", "Xác nhận", JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.YES_OPTION) {
            delete();
        } else {
            return;
        }
    }//GEN-LAST:event_btnXoaActionPerformed

    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaActionPerformed
        openNhapKiemKe();
    }//GEN-LAST:event_btnSuaActionPerformed

    private void btnRestartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRestartActionPerformed
        setButtonDefault();
        fillToTableKiemKe();
    }//GEN-LAST:event_btnRestartActionPerformed

    private void tblKiemKeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblKiemKeMouseClicked
        fillToTableChiTiet();
    }//GEN-LAST:event_tblKiemKeMouseClicked

    private void btnRestart1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRestart1ActionPerformed
        printExcel();
    }//GEN-LAST:event_btnRestart1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRestart;
    private javax.swing.JButton btnRestart1;
    private javax.swing.JButton btnSua;
    private javax.swing.JButton btnThem;
    private javax.swing.JButton btnXoa;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable tblChiTiet;
    private javax.swing.JTable tblKiemKe;
    // End of variables declaration//GEN-END:variables

    private void init() {
        fillToTableKiemKe();
        setCTKK();
        setButtonDefault();
    }

    public void fillToTableKiemKe() {
        DefaultTableModel model = (DefaultTableModel) tblKiemKe.getModel();
        model.setRowCount(0);
        try {
            List<KiemKe> list = daoKK.selectAll();
            for (KiemKe kk : list) {
                Object[] row = {
                    kk.getMaKiemKe(),
                    kk.getNgayTaoKiemKe(),
                    kk.getKyKiemKe(),
                    kk.getMucDich(),
                    kk.getKetLuan(),
                    kk.isDaXuLy() ? true : false
                };
                model.addRow(row);
//                setButton();
                setCTKK();
            }
        } catch (Exception e) {
            System.out.println(e);
            JOptionPane.showMessageDialog(this, "Lỗi truy vẫn dữ liệu");
        }
    }

    private void fillToTableChiTiet() {
        DefaultTableModel model = (DefaultTableModel) tblChiTiet.getModel();
        model.setRowCount(0);

        int col = 0;
        int rowSelected = tblKiemKe.getSelectedRow();

        if (rowSelected == -1) {

        }
        try {
            int convertRow = tblKiemKe.convertRowIndexToModel(rowSelected);
            int IDKiemKe = (int) tblKiemKe.getValueAt(convertRow, col);
            List<ChiTietKiemKe> list = daoCTKK.getChiTietKiemKe(IDKiemKe);

            for (ChiTietKiemKe ctkk : list) {
                Object[] row = {
                    ctkk.getMaSP(),
                    ctkk.getTenSP(),
                    ctkk.getMauSac(),
                    ctkk.getSlKeToan(),
                    ctkk.getSlThucTe(),
                    ctkk.getChenhLech(),
                    ctkk.getLoaiXuLy(),};
                model.addRow(row);
            }
            setButton();
            setCTKK();
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void delete() {
        DefaultTableModel model = (DefaultTableModel) tblChiTiet.getModel();
        int col = 0;
        int row = tblKiemKe.convertRowIndexToModel(tblKiemKe.getSelectedRow());
        if (row >= 0) {
            int ID = (int) tblKiemKe.getValueAt(row, col);
            daoKK.delete(ID);
            model.setRowCount(0);
            fillToTableKiemKe();
        } else {
            System.out.println("no no no " + row);
        }
    }

    public void updateMD_KK(int idKK, String MucDich, String KetLuan) {
        KiemKe model = new KiemKe();

        List<KiemKe> listKK = daoKK.selectAll();
        for (KiemKe kiemKe : listKK) {
            if (kiemKe.getMaKiemKe() == idKK) {
                kiemKe.setMucDich(MucDich);
                kiemKe.setKetLuan(KetLuan);
            }
        }
        for (KiemKe kiemKe : listKK) {
            daoKK.updateKiemKeFormSetMucDich(kiemKe);
        }
    }

    //CHECK NÚT THÊM KHI CHƯA CHỌN DÒNG
    private void openNhapKiemKe() {

        int col = 0;
        int row = tblKiemKe.convertRowIndexToModel(tblKiemKe.getSelectedRow());

        int ID = (int) tblKiemKe.getValueAt(row, col);
        Form_NhapKiemKeHangHoa nhapThongKeWindow = new Form_NhapKiemKeHangHoa();
        nhapThongKeWindow.setVisible(true);
        nhapThongKeWindow.fillToTable(ID);
    }

    void setButton() {
        int col = 0;
        int rowSelected = tblKiemKe.getSelectedRow();

        if (rowSelected != -1) {
            setButtonAfterSave(rowSelected);
        } else {
            setButtonDefault();
        }
    }

    void setButtonDefault() {
        btnThem.setEnabled(true);
        btnSua.setEnabled(false);
        btnXoa.setEnabled(false);
        btnRestart.setEnabled(true);
        tblKiemKe.clearSelection();
    }

    void setButtonAfterSave(int rowSelected) {
        boolean loaiXuLy = true;

        btnThem.setEnabled(false);
        btnSua.setEnabled(true);
        btnXoa.setEnabled(true);
        btnRestart.setEnabled(true);
        loaiXuLy = (boolean) tblKiemKe.getValueAt(rowSelected, 5);
        if (loaiXuLy == true) {
//            btnSua.setEnabled(false);
//            btnThem.setEnabled(false);
//            btnXoa.setEnabled(true);
//            btnRestart.setEnabled(true);
        } else if (loaiXuLy == false) {
//            btnSua.setEnabled(true);
//            btnThem.setEnabled(false);
//            btnXoa.setEnabled(true);
//            btnRestart.setEnabled(true);
        }
    }

    void setCTKK() {
        int rowSelected = tblKiemKe.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) tblChiTiet.getModel();
        if (rowSelected == -1) {
            model.setRowCount(0);
        }
    }

    private void printExcel() {
        List<ChiTietKiemKe> sanPhams = daoCTKK.selectAll();
        FileOutputStream excelFOS = null;
        BufferedOutputStream excelBOU = null;
        XSSFWorkbook excelJTableExporter = null;
//        XSSFWorkbook excelJTableExporterSheet2 = null;

        //Chọn vị trí lưu file excel
        JFileChooser excelFileChooser = new JFileChooser("C:\\PrintKiemKeDaXuLy");
        //Thay đổi tiêu đề Dialog
        excelFileChooser.setDialogTitle("Save as");
        // Chỉ xuất file có các đuôi xlsm, xlsx, xls 
        FileNameExtensionFilter fnef = new FileNameExtensionFilter("EXCEL FILES", "xls", "xlsx", "xlsm");
        excelFileChooser.setFileFilter(fnef);
        int excelChooser = excelFileChooser.showSaveDialog(null);

        if (excelChooser == JFileChooser.APPROVE_OPTION) {

            try {
                // Nhập thư viện poi excel vào netbeans
                excelJTableExporter = new XSSFWorkbook();
                Workbook wb = new XSSFWorkbook();
                //Tạo trang
                XSSFSheet excelSheet = excelJTableExporter.createSheet("Chi tiết kiểm kê kỳ " + (int) tblKiemKe.getValueAt(tblKiemKe.getSelectedRow(), 2));
                //Tạo hàng 0
                XSSFRow rowcol = excelSheet.createRow(0);
                //Tạo column cho hàng 0
                XSSFCell cell0 = rowcol.createCell(0);
                cell0.setCellValue("Mã sản phẩm");
                XSSFCell cell1 = rowcol.createCell(1);
                cell1.setCellValue("Tên sản phẩm");
                XSSFCell cell2 = rowcol.createCell(2);
                cell2.setCellValue("Màu sắc");
                XSSFCell cell3 = rowcol.createCell(3);
                cell3.setCellValue("Thống kê kiểm toán");
                XSSFCell cell4 = rowcol.createCell(4);
                cell4.setCellValue("Thống kê thực tế");
                XSSFCell cell5 = rowcol.createCell(5);
                cell5.setCellValue("Chênh lệch");
                XSSFCell cell6 = rowcol.createCell(6);
                cell6.setCellValue("Loại xử lý");

//                    TẠO SHEET 2
//                    excelJTableExporterSheet2 = new XSSFWorkbook();
                XSSFSheet excelSheet2 = excelJTableExporter.createSheet("Thông tin " + (int) tblKiemKe.getValueAt(tblKiemKe.getSelectedRow(), 2));
                XSSFRow row0Sheet2 = excelSheet2.createRow(0);
                //tạo col
                XSSFCell cellSheet20 = row0Sheet2.createCell(0);
                cellSheet20.setCellValue("Ngày kiểm kê");
                XSSFCell cellSheet21 = row0Sheet2.createCell(1);
                cellSheet21.setCellValue("Mục đích");
                XSSFCell cellSheet22 = row0Sheet2.createCell(2);
                cellSheet22.setCellValue("Kết luận");

                int rowNum = 1;
                for (int i = 0; i < tblChiTiet.getRowCount(); i++) {

                    //Tạo row theo số lượng trong trong bảng 
                    XSSFRow row = excelSheet.createRow(rowNum++);
                    //Tạo ô 1 cho row  
                    XSSFCell cell = row.createCell(0);
                    //set giá trị cho ô 1
                    cell.setCellValue((int) tblChiTiet.getValueAt(i, 0));

                    cell = row.createCell(1);
                    cell.setCellValue(String.valueOf(tblChiTiet.getValueAt(i, 1)));

                    cell = row.createCell(2);
                    cell.setCellValue(String.valueOf(tblChiTiet.getValueAt(i, 2)));

                    cell = row.createCell(3);
                    cell.setCellValue((int) tblChiTiet.getValueAt(i, 3));

                    cell = row.createCell(4);
                    cell.setCellValue((int) tblChiTiet.getValueAt(i, 4));

                    cell = row.createCell(5);
                    cell.setCellValue((int) tblChiTiet.getValueAt(i, 5));

                    cell = row.createCell(6);
                    cell.setCellValue(String.valueOf(tblChiTiet.getValueAt(i, 6)));
                }
                //SHEET 2
                //tạo hàng số 2
                XSSFRow row1Sheet2 = excelSheet2.createRow(1);
                //Tạo ô cho hàng 2
                XSSFCell cellNgaySheet2 = row1Sheet2.createCell(1);
                //Set value cho ô của cell 
                cellNgaySheet2.setCellValue((String) tblKiemKe.getValueAt(tblKiemKe.getSelectedRow(), 1));

                System.out.println(tblKiemKe.getValueAt(tblKiemKe.getSelectedRow(), 1));
                XSSFCell cellMucDichSheet2 = row1Sheet2.createCell(1);
                cellMucDichSheet2.setCellValue(String.valueOf(tblKiemKe.getValueAt(tblKiemKe.getSelectedRow(), 3)));

                XSSFCell cellKetLuanSheet2 = row1Sheet2.createCell(2);
                cellKetLuanSheet2.setCellValue((String) tblKiemKe.getValueAt(tblKiemKe.getSelectedRow(), 4));

                //Append xlsx file extesions to selected files. To create unqiue file
                excelFOS = new FileOutputStream(excelFileChooser.getSelectedFile() + ".xlsx");
                excelBOU = new BufferedOutputStream(excelFOS);
                excelJTableExporter.write(excelBOU);
//                excelJTableExporterSheet2.write(excelBOU);
                JOptionPane.showMessageDialog(null, "Exported successfully...");
            } catch (FileNotFoundException ex) {
                ex.printStackTrace();
            } catch (IOException ex) {
                ex.printStackTrace();
            } finally {
                try {
                    if (excelBOU != null) {
                        excelBOU.close();
                    }
                    if (excelFOS != null) {
                        excelFOS.close();
                    }

                    if (excelJTableExporter != null) {
                        excelJTableExporter.close();
                    }
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
        }
    }
}
