package com.raven.form;

import com.raven.dialog.Message;
import com.raven.main.Main;
import java.awt.Color;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import javax.print.PrintException;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import qlsmp.DAO.NhanVienDAO;
import qlsmp.Model.NhanVien;
import qlsmp.utis.Auth;
import qlsmp.utis.XImage;

public class Form_NhanVien extends javax.swing.JPanel {

    NhanVienDAO dao = new NhanVienDAO();
    List<NhanVien> list = dao.selectAll();
    String EMAIL_REGEX = "^[A-Za-z0-9]+[A-Za-z0-9]*@[A-Za-z0-9]+(\\.[A-Za-z0-9]+)+$";
    String PHONE_NUMBER_REGEX = "0{1}[0-9]{9}";
    String DATE_REGEX = "^\\d{4}\\-(0?[1-9]|1[012])\\-(0?[1-9]|[12][0-9]|3[01])$";
    String CCCD_REGEX = "[0-9]{12}";
    String PASSWORD_REGEX = "\\A(?=\\S*?[\\d])(?=\\S*?[a-z])(?=\\S*?[A-Z])(?=\\S*?[\\W])\\S{8,}\\z";
    int row = -1;

    public Form_NhanVien() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        FileChooser = new javax.swing.JFileChooser();
        rdgChucVu = new javax.swing.ButtonGroup();
        rdgGioiTinh = new javax.swing.ButtonGroup();
        jCalendar1 = new com.toedter.calendar.JCalendar();
        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        jPanel15 = new javax.swing.JPanel();
        txtTimKiem = new javax.swing.JTextField();
        btnTim = new javax.swing.JButton();
        jScrollPane9 = new javax.swing.JScrollPane();
        tblNhanVien = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        JPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblAnhThe = new javax.swing.JLabel();
        txtMaNV = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtHoTen = new javax.swing.JTextField();
        txtDienThoai = new javax.swing.JTextField();
        txtCCCD = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtDiaChi = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        btnThem = new javax.swing.JButton();
        btnSua = new javax.swing.JButton();
        btnXoa = new javax.swing.JButton();
        btnMoi = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        rdoNhanVien = new javax.swing.JRadioButton();
        rdoTruongPhong = new javax.swing.JRadioButton();
        jPanel8 = new javax.swing.JPanel();
        rdoNu = new javax.swing.JRadioButton();
        rdoNam = new javax.swing.JRadioButton();
        lblErrIDNhanVien = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        lblErrNgaySinh = new javax.swing.JLabel();
        lblErrPassword = new javax.swing.JLabel();
        lblErrCCCD = new javax.swing.JLabel();
        lblErrUsername = new javax.swing.JLabel();
        lblErrSDT = new javax.swing.JLabel();
        lblErrEmail = new javax.swing.JLabel();
        lblErrDiaChi = new javax.swing.JLabel();
        lblErrHoTen = new javax.swing.JLabel();
        txtPassword = new javax.swing.JPasswordField();
        txtNgaySinh = new com.toedter.calendar.JDateChooser();

        FileChooser.setCurrentDirectory(new java.io.File("H:\\FPOLY\\HocKy4\\Block2"));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel22.setBackground(new java.awt.Color(11, 52, 106));
        jLabel22.setFont(new java.awt.Font("Roboto Condensed", 0, 14)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(11, 52, 106));
        jLabel22.setText("Tìm kiếm");

        jPanel15.setBackground(new java.awt.Color(255, 255, 255));
        jPanel15.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(226, 232, 240), null));

        txtTimKiem.setBackground(new java.awt.Color(226, 232, 240));
        txtTimKiem.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        txtTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTimKiemActionPerformed(evt);
            }
        });

        btnTim.setBackground(new java.awt.Color(11, 52, 106));
        btnTim.setForeground(new java.awt.Color(255, 255, 255));
        btnTim.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/kinh_lup.png"))); // NOI18N
        btnTim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtTimKiem)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnTim, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTim))
                .addGap(5, 5, 5))
        );

        tblNhanVien.setBackground(new java.awt.Color(226, 232, 240));
        tblNhanVien.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        tblNhanVien.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Họ tên", "Giới tính", "Ngày sinh", "Địa chỉ", "Điện thoại", "CCCD", "Email", "Username", "Vị trí"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblNhanVien.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tblNhanVien.setName("Bảng"); // NOI18N
        tblNhanVien.setSelectionBackground(new java.awt.Color(11, 52, 106));
        tblNhanVien.setSelectionForeground(new java.awt.Color(255, 255, 255));
        tblNhanVien.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblNhanVienMouseClicked(evt);
            }
        });
        jScrollPane9.setViewportView(tblNhanVien);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 709, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel22)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane9)
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(226, 232, 240), null));
        jPanel2.setEnabled(false);

        jLabel11.setFont(new java.awt.Font("Roboto Condensed", 0, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(11, 52, 106));
        jLabel11.setText("Ngày sinh *");

        jLabel3.setFont(new java.awt.Font("Roboto Condensed", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(11, 52, 106));
        jLabel3.setText("Mã nhân viên");

        jLabel7.setFont(new java.awt.Font("Roboto Condensed", 0, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(11, 52, 106));
        jLabel7.setText("Số điện thoại *");

        jLabel8.setFont(new java.awt.Font("Roboto Condensed", 0, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(11, 52, 106));
        jLabel8.setText("Giới tính");

        JPanel.setBackground(new java.awt.Color(255, 255, 255));
        JPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 102, 51), null));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jLabel1.setOpaque(true);

        lblAnhThe.setBackground(new java.awt.Color(226, 232, 240));
        lblAnhThe.setOpaque(true);
        lblAnhThe.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblAnhTheMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout JPanelLayout = new javax.swing.GroupLayout(JPanel);
        JPanel.setLayout(JPanelLayout);
        JPanelLayout.setHorizontalGroup(
            JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPanelLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel1)
                .addContainerGap(191, Short.MAX_VALUE))
            .addGroup(JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(JPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(lblAnhThe, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        JPanelLayout.setVerticalGroup(
            JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(JPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(lblAnhThe, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        txtMaNV.setEditable(false);
        txtMaNV.setBackground(new java.awt.Color(226, 232, 240));
        txtMaNV.setFont(new java.awt.Font("Roboto Condensed", 0, 14)); // NOI18N
        txtMaNV.setEnabled(false);
        txtMaNV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMaNVActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Roboto Condensed", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(11, 52, 106));
        jLabel4.setText("Họ tên *");

        jLabel13.setFont(new java.awt.Font("Roboto Condensed", 0, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(11, 52, 106));
        jLabel13.setText("Địa chỉ ");

        jLabel9.setFont(new java.awt.Font("Roboto Condensed", 0, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(11, 52, 106));
        jLabel9.setText("CCCD / CMND *");

        txtHoTen.setBackground(new java.awt.Color(226, 232, 240));
        txtHoTen.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        txtHoTen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHoTenActionPerformed(evt);
            }
        });

        txtDienThoai.setBackground(new java.awt.Color(226, 232, 240));
        txtDienThoai.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        txtDienThoai.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDienThoaiActionPerformed(evt);
            }
        });

        txtCCCD.setBackground(new java.awt.Color(226, 232, 240));
        txtCCCD.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        txtCCCD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCCCDActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Roboto Condensed", 0, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(11, 52, 106));
        jLabel10.setText("Email *");

        txtDiaChi.setBackground(new java.awt.Color(226, 232, 240));
        txtDiaChi.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        txtDiaChi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDiaChiActionPerformed(evt);
            }
        });

        txtEmail.setBackground(new java.awt.Color(226, 232, 240));
        txtEmail.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        txtEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmailActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Roboto Condensed", 0, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(11, 52, 106));
        jLabel12.setText("Username *");

        txtUsername.setBackground(new java.awt.Color(226, 232, 240));
        txtUsername.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        txtUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUsernameActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Roboto Condensed", 0, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(11, 52, 106));
        jLabel14.setText("Password *");

        btnThem.setBackground(new java.awt.Color(11, 52, 106));
        btnThem.setFont(new java.awt.Font("Roboto Condensed", 0, 14)); // NOI18N
        btnThem.setForeground(new java.awt.Color(255, 255, 255));
        btnThem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/add.png"))); // NOI18N
        btnThem.setText("Nhân viên");
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });

        btnSua.setBackground(new java.awt.Color(11, 52, 106));
        btnSua.setFont(new java.awt.Font("Roboto Condensed", 0, 14)); // NOI18N
        btnSua.setForeground(new java.awt.Color(255, 255, 255));
        btnSua.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/tick.png"))); // NOI18N
        btnSua.setText("Cập nhật");
        btnSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaActionPerformed(evt);
            }
        });

        btnXoa.setBackground(new java.awt.Color(11, 52, 106));
        btnXoa.setFont(new java.awt.Font("Roboto Condensed", 0, 14)); // NOI18N
        btnXoa.setForeground(new java.awt.Color(255, 255, 255));
        btnXoa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/trash.png"))); // NOI18N
        btnXoa.setText("Xóa");
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });

        btnMoi.setBackground(new java.awt.Color(11, 52, 106));
        btnMoi.setFont(new java.awt.Font("Roboto Condensed", 0, 14)); // NOI18N
        btnMoi.setForeground(new java.awt.Color(255, 255, 255));
        btnMoi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/restart.png"))); // NOI18N
        btnMoi.setText("Làm mới");
        btnMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoiActionPerformed(evt);
            }
        });

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(226, 232, 240), null));
        jPanel7.setToolTipText("");

        rdgChucVu.add(rdoNhanVien);
        rdoNhanVien.setFont(new java.awt.Font("Roboto Condensed", 0, 14)); // NOI18N
        rdoNhanVien.setForeground(new java.awt.Color(11, 52, 106));
        rdoNhanVien.setText("Nhân viên");
        rdoNhanVien.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoNhanVienActionPerformed(evt);
            }
        });

        rdgChucVu.add(rdoTruongPhong);
        rdoTruongPhong.setFont(new java.awt.Font("Roboto Condensed", 0, 14)); // NOI18N
        rdoTruongPhong.setForeground(new java.awt.Color(11, 52, 106));
        rdoTruongPhong.setText("Trưởng phòng");
        rdoTruongPhong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoTruongPhongActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(rdoTruongPhong)
                .addGap(18, 18, 18)
                .addComponent(rdoNhanVien)
                .addGap(19, 19, 19))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdoTruongPhong)
                    .addComponent(rdoNhanVien))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel8.setBackground(new java.awt.Color(255, 255, 255));
        jPanel8.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(226, 232, 240), null));
        jPanel8.setToolTipText("");

        rdgGioiTinh.add(rdoNu);
        rdoNu.setFont(new java.awt.Font("Roboto Condensed", 0, 14)); // NOI18N
        rdoNu.setForeground(new java.awt.Color(11, 52, 106));
        rdoNu.setText("Nữ");

        rdgGioiTinh.add(rdoNam);
        rdoNam.setFont(new java.awt.Font("Roboto Condensed", 0, 14)); // NOI18N
        rdoNam.setForeground(new java.awt.Color(11, 52, 106));
        rdoNam.setText("Nam");
        rdoNam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoNamActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rdoNam)
                .addGap(18, 18, 18)
                .addComponent(rdoNu)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdoNam)
                    .addComponent(rdoNu))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lblErrIDNhanVien.setFont(new java.awt.Font("Roboto Condensed", 0, 10)); // NOI18N

        jLabel15.setFont(new java.awt.Font("Roboto Condensed", 0, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(11, 52, 106));
        jLabel15.setText("Chức vụ");

        lblErrNgaySinh.setFont(new java.awt.Font("Roboto Condensed", 0, 10)); // NOI18N

        lblErrPassword.setFont(new java.awt.Font("Roboto Condensed", 0, 10)); // NOI18N

        lblErrCCCD.setFont(new java.awt.Font("Roboto Condensed", 0, 10)); // NOI18N

        lblErrUsername.setFont(new java.awt.Font("Roboto Condensed", 0, 10)); // NOI18N

        lblErrSDT.setFont(new java.awt.Font("Roboto Condensed", 0, 10)); // NOI18N

        lblErrEmail.setFont(new java.awt.Font("Roboto Condensed", 0, 10)); // NOI18N

        lblErrDiaChi.setFont(new java.awt.Font("Roboto Condensed", 0, 10)); // NOI18N

        lblErrHoTen.setFont(new java.awt.Font("Roboto Condensed", 0, 10)); // NOI18N

        txtPassword.setBackground(new java.awt.Color(226, 232, 240));
        txtPassword.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N

        txtNgaySinh.setDateFormatString("yyyy-MM-dd");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel15)
                        .addComponent(JPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblErrPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblErrUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(btnThem)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnSua))
                        .addComponent(lblErrEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtUsername)
                        .addComponent(txtEmail)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtHoTen)
                    .addComponent(lblErrCCCD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtCCCD)
                    .addComponent(lblErrIDNhanVien, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtMaNV)
                    .addComponent(lblErrHoTen, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblErrDiaChi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtDiaChi)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(btnXoa, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnMoi, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblErrSDT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtDienThoai)
                    .addComponent(lblErrNgaySinh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNgaySinh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(3, 3, 3)
                        .addComponent(txtMaNV, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblErrIDNhanVien, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtHoTen, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(lblErrHoTen, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCCCD, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(JPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addComponent(lblErrCCCD, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNgaySinh, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblErrEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblErrNgaySinh, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13)
                    .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(3, 3, 3)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDiaChi, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblErrUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblErrDiaChi, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDienThoai, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblErrPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblErrSDT, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 109, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnThem)
                    .addComponent(btnMoi)
                    .addComponent(btnSua)
                    .addComponent(btnXoa))
                .addGap(19, 19, 19))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(242, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTimKiemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTimKiemActionPerformed

    private void btnTimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimActionPerformed
        if (txtTimKiem.getText().isBlank()) {
            fillToTableByQL();
        } else {
            timKiem();
        }
    }//GEN-LAST:event_btnTimActionPerformed

    private void tblNhanVienMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblNhanVienMouseClicked
        this.row = tblNhanVien.rowAtPoint(evt.getPoint());
        edit();
    }//GEN-LAST:event_tblNhanVienMouseClicked

    private void lblAnhTheMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblAnhTheMouseClicked
        chonAnh();
    }//GEN-LAST:event_lblAnhTheMouseClicked

    private void txtMaNVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMaNVActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMaNVActionPerformed

    private void txtHoTenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHoTenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHoTenActionPerformed

    private void txtDienThoaiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDienThoaiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDienThoaiActionPerformed

    private void txtCCCDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCCCDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCCCDActionPerformed

    private void txtDiaChiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDiaChiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDiaChiActionPerformed

    private void txtEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmailActionPerformed

    private void txtUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUsernameActionPerformed

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
        insert();
    }//GEN-LAST:event_btnThemActionPerformed

    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaActionPerformed
        int option = JOptionPane.showConfirmDialog(this, "Bạn có chắn chắn muốn cập nhật thông tin?", "Xác nhận", JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.YES_OPTION) {
            update();
        } else {
            return;
        }
    }//GEN-LAST:event_btnSuaActionPerformed

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        int option = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn xóa tài khoản?", "Xác nhận", JOptionPane.YES_NO_CANCEL_OPTION);
        if (option == JOptionPane.YES_OPTION) {
            delete();
        }
        return;
    }//GEN-LAST:event_btnXoaActionPerformed

    private void btnMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoiActionPerformed
        clearForm();
    }//GEN-LAST:event_btnMoiActionPerformed

    private void rdoNhanVienActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoNhanVienActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdoNhanVienActionPerformed

    private void rdoTruongPhongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoTruongPhongActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdoTruongPhongActionPerformed

    private void rdoNamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoNamActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdoNamActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser FileChooser;
    private javax.swing.JPanel JPanel;
    private javax.swing.JButton btnMoi;
    private javax.swing.JButton btnSua;
    private javax.swing.JButton btnThem;
    private javax.swing.JButton btnTim;
    private javax.swing.JButton btnXoa;
    private com.toedter.calendar.JCalendar jCalendar1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JLabel lblAnhThe;
    private javax.swing.JLabel lblErrCCCD;
    private javax.swing.JLabel lblErrDiaChi;
    private javax.swing.JLabel lblErrEmail;
    private javax.swing.JLabel lblErrHoTen;
    private javax.swing.JLabel lblErrIDNhanVien;
    private javax.swing.JLabel lblErrNgaySinh;
    private javax.swing.JLabel lblErrPassword;
    private javax.swing.JLabel lblErrSDT;
    private javax.swing.JLabel lblErrUsername;
    private javax.swing.ButtonGroup rdgChucVu;
    private javax.swing.ButtonGroup rdgGioiTinh;
    private javax.swing.JRadioButton rdoNam;
    private javax.swing.JRadioButton rdoNhanVien;
    private javax.swing.JRadioButton rdoNu;
    private javax.swing.JRadioButton rdoTruongPhong;
    private javax.swing.JTable tblNhanVien;
    private javax.swing.JTextField txtCCCD;
    private javax.swing.JTextField txtDiaChi;
    private javax.swing.JTextField txtDienThoai;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtHoTen;
    private javax.swing.JTextField txtMaNV;
    private com.toedter.calendar.JDateChooser txtNgaySinh;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtTimKiem;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables
    private void init() {
        setForRole();
        fillID();
        this.row = -1;
        this.updateStatus();
        rdoNam.setSelected(true);
        rdoTruongPhong.setSelected(true);
        setColumnWidths(60, 240, 58, 100, 60, 110, 120, 120, 100, 50);
    }

    public void setColumnWidths(int... widths) {
        TableColumnModel columnModel = tblNhanVien.getColumnModel();
        for (int i = 0; i < widths.length; i++) {
            if (i < columnModel.getColumnCount()) {
                columnModel.getColumn(i).setMaxWidth(widths[i]);
            } else {
                break;
            }
        }
    }

    private void fillToTableByQL() {
        DefaultTableModel model = (DefaultTableModel) tblNhanVien.getModel();
        model.setRowCount(0);
        try {
            List<NhanVien> list = dao.selectAll();
            for (NhanVien nv : list) {
                Object[] row = {
                    nv.getMaNV(),
                    nv.getHoTen(),
                    nv.isGioiTinh() ? "Nam" : "Nữ",
                    nv.getNgaySinh(),
                    nv.getDiaChi(),
                    nv.getDienThoai(),
                    nv.getCCCD(),
                    nv.getEmail(),
                    nv.getUsername(),
                    nv.isChucVu() ? "QL" : "NV"
                };
                model.addRow(row);
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi truy vẫn dữ liệu");
        }
    }

    private void fillToTableByNV(int ID) {
        DefaultTableModel model = (DefaultTableModel) tblNhanVien.getModel();
        model.setRowCount(0);
        try {
            List<NhanVien> list = dao.selectByID(Auth.user.getMaNV());
            for (NhanVien nv : list) {
                Object[] row = {
                    nv.getMaNV(),
                    nv.getHoTen(),
                    nv.isGioiTinh() ? "Nam" : "Nữ",
                    nv.getNgaySinh(),
                    nv.getDiaChi(),
                    nv.getDienThoai(),
                    nv.getCCCD(),
                    nv.getEmail(),
                    nv.getUsername(),
                    nv.isChucVu() ? "QL" : "NV"
                };
                model.addRow(row);
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi truy vẫn dữ liệu");
        }
    }

    private void timKiem() {
        DefaultTableModel model = (DefaultTableModel) tblNhanVien.getModel();
        model.setRowCount(0);
        try {
            List<NhanVien> list = dao.selectByKeyWord(txtTimKiem.getText());
            for (NhanVien nv : list) {
                System.out.println("Mã nhân viên chỗ tìm kiếm: " + nv.getHoTen());
                Object[] nhanvien = {
                    nv.getMaNV(),
                    nv.getHoTen(),
                    nv.isGioiTinh() ? "Nam" : "Nữ",
                    nv.getNgaySinh(),
                    nv.getDiaChi(),
                    nv.getDienThoai(),
                    nv.getCCCD(),
                    nv.getEmail(),
                    nv.getUsername(),
                    nv.isChucVu() ? "QL" : "NV"
                };
                model.addRow(nhanvien);
                this.row = -1;
                updateStatus();
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi truy vẫn dữ liệu");
        }
    }

//set du lieu vao form
    private void setForm(NhanVien nv) {

        try {
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            Date ngaySinh = dateFormat.parse(nv.getNgaySinh());

            txtMaNV.setText(String.valueOf(nv.getMaNV()));
            txtHoTen.setText(nv.getHoTen());
            if (nv.isGioiTinh() == true) {
                rdoNam.setSelected(true);
            } else if (nv.isGioiTinh() == false) {
                rdoNu.setSelected(true);
            }
            txtNgaySinh.setDate(ngaySinh);
            txtDiaChi.setText(nv.getDiaChi());
            txtDienThoai.setText(nv.getDienThoai());
            txtCCCD.setText(nv.getCCCD());
            txtEmail.setText(nv.getEmail());
            if (nv == null) {
                lblAnhThe.setIcon(null);
            } else {
                if (nv.getHinhAnh() != null) {
                    setHinhAnh(nv.getHinhAnh(), lblAnhThe);
                } else {
                    lblAnhThe.setIcon(null);
                }
            }
            txtUsername.setText(nv.getUsername());
            txtPassword.setText("");
            if (nv.isChucVu() == true) {
                rdoTruongPhong.setSelected(true);
            } else {
                rdoNhanVien.setSelected(true);
            }
        } catch (ParseException ex) {
            ex.printStackTrace();
        }

    }

    private NhanVien getForm() {
        NhanVien model = new NhanVien();
        List<NhanVien> list = dao.selectAll();

        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        Date ngaySinhDATE = txtNgaySinh.getDate();
        String ngaySinh = sdf.format(ngaySinhDATE);

        for (NhanVien NV : list) {
            if (!txtMaNV.getText().equals(String.valueOf(NV.getMaNV()).toString())) {
                if (checkForm() == false) {
                    return model = null;
                } else {
                    model.setMaNV(Integer.parseInt(txtMaNV.getText()));
                    model.setHoTen(txtHoTen.getText());
                    if (rdoNu.isSelected() == true) {
                        model.setGioiTinh(false);
                    } else {
                        model.setGioiTinh(true);
                    }
                    model.setNgaySinh(ngaySinh);
                    model.setDienThoai(txtDienThoai.getText());
                    model.setDiaChi(txtDiaChi.getText());
                    model.setCCCD(txtCCCD.getText());
                    model.setEmail(txtEmail.getText());
                    model.setHinhAnh(lblAnhThe.getToolTipText());
                    if (model.getHinhAnh() == null) {
                        model.setHinhAnh("");
                    }
                    model.setUsername(txtUsername.getText());
                    model.setPassword(dao.getMd5(txtPassword.getText()));
                    if (rdoTruongPhong.isSelected()) {
                        model.setChucVu(true);
                    } else {
                        model.setChucVu(false);
                    }
                }
            }
        }
        return model;
    }

    private NhanVien getFormUPDATE() {
        NhanVien model = new NhanVien();
        List<NhanVien> list = dao.selectAll();

        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        Date ngaySinhDATE = txtNgaySinh.getDate();
        String ngaySinh = sdf.format(ngaySinhDATE);

        if (checkFormUP() == false) {
            return model = null;
        } else {
            model.setMaNV(Integer.parseInt(txtMaNV.getText()));
            model.setHoTen(txtHoTen.getText());
            if (rdoNu.isSelected() == true) {
                model.setGioiTinh(false);
            } else {
                model.setGioiTinh(true);
            }
            model.setNgaySinh(ngaySinh);
            model.setDienThoai(txtDienThoai.getText());
            model.setDiaChi(txtDiaChi.getText());
            model.setCCCD(txtCCCD.getText());
            model.setEmail(txtEmail.getText());
            model.setHinhAnh(lblAnhThe.getToolTipText());
            if (model.getHinhAnh() == null) {
                model.setHinhAnh("");
            }
            model.setUsername(txtUsername.getText());
            model.setPassword(dao.getMd5(txtPassword.getText()));
            if (rdoTruongPhong.isSelected() == true) {
                model.setChucVu(true);
            } else {
                model.setChucVu(false);
            }
        }
        return model;
    }

    private void clearForm() {
        NhanVien nv = new NhanVien();

        if (!Auth.isManager()) {
            lblErrPassword.setText("");
            lblErrNgaySinh.setToolTipText("");
            lblAnhThe.setText("");
            lblAnhThe.setIcon(null);
            lblErrIDNhanVien.setText("");
            lblErrUsername.setText("");
            lblErrCCCD.setText("");
            lblErrEmail.setText("");
            lblErrSDT.setText("");

            txtCCCD.setText("");
            txtDiaChi.setText("");
            txtDienThoai.setText("");
            txtHoTen.setText("");
            txtMaNV.setText("");
//            txtNgaySinh.setText("");
            txtEmail.setText("");
            txtPassword.setText("");
            txtUsername.setText("");
            txtPassword.setEnabled(true);

            rdoNam.setSelected(true);
            rdoTruongPhong.setSelected(true);

            btnThem.setEnabled(false);
            btnXoa.setEnabled(false);
            btnSua.setEnabled(false);

            row = -1;
        }
        if (Auth.isManager()) {
            lblErrPassword.setText("");
            lblErrNgaySinh.setToolTipText("");
            lblAnhThe.setIcon(null);
            lblErrNgaySinh.setText("");
            lblErrIDNhanVien.setText("");
            lblErrUsername.setText("");
            lblErrCCCD.setText("");
            lblErrEmail.setText("");
            lblErrSDT.setText("");

            txtCCCD.setText("");
            txtDiaChi.setText("");
            txtDienThoai.setText("");
            txtHoTen.setText("");
            txtMaNV.setText("");
            txtNgaySinh.setDate(null);
            txtEmail.setText("");
            txtPassword.setText("");
            txtUsername.setText("");
            txtPassword.setEnabled(true);

            rdoNam.setSelected(true);
            rdoTruongPhong.setSelected(true);
            fillToTableByQL();
            this.updateStatus();
            fillID();
            row = -1;
        }
    }

    private void insert() {
        NhanVien model = getForm();
        try {
            if (Auth.isManager()) {
                dao.insert(model);
                setForm(model);
                this.clearForm();
                clearForm();
                fillID();
                JOptionPane.showMessageDialog(this, "Thêm mới thành công");
            }
        } catch (RuntimeException e) {
            JOptionPane.showMessageDialog(this, "Thêm mới thất bại.");
        }
    }

    private void update() {
        NhanVien model = getFormUPDATE();
        NhanVien list = dao.selectById(Integer.parseInt(txtMaNV.getText()));
        boolean chucvu = list.isChucVu();
        try {
            if (Auth.isManager()) {
                if (model.getMaNV() != Auth.user.getMaNV()) {
                    if (chucvu == false) {
                        dao.update(model);
                        this.fillToTableByQL();
                        JOptionPane.showMessageDialog(this, "Cập nhật thành công");
                        clearForm();
                        fillID();
                    } else {
                        JOptionPane.showMessageDialog(this, "Không thể cập nhật thông tin quản lý khác");
                    }
                } else {
                    if (checkQuanLyCuoiCung() == 1) {
                        JOptionPane.showMessageDialog(this, "Cần ít nhất 2 tài khoản quản lý để có thể thay đổi chức vụ");
                    } else {
                        dao.update(model);
                        this.fillToTableByQL();
                        JOptionPane.showMessageDialog(this, "Cập nhật thành công");
                        clearForm();
                        fillID();
                    }
                }
            } else {
                if (model.isChucVu() == true) {
                    JOptionPane.showMessageDialog(this, "Nhân viên không thể tự điều chỉnh chức vụ");
                    return;
                } else {
                    dao.update(model);
                    this.fillToTableByNV(Integer.parseInt(txtMaNV.getText()));
                    JOptionPane.showMessageDialog(this, "Cập nhật thành công");
                    clearForm();
                    fillID();
                }
            }
        } catch (RuntimeException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Cập nhật thất bại.");
        }
    }

    private void delete() {
//        NhanVien model = getForm();
        int maNV = Integer.parseInt(txtMaNV.getText());
        NhanVien list = dao.selectById(Integer.parseInt(txtMaNV.getText()));
        boolean chucvu = list.isChucVu();
        try {
            if (Auth.isManager()) {
                if (maNV != Auth.user.getMaNV()) {
                    if (chucvu == true) {
                        JOptionPane.showMessageDialog(this, "Không thể xóa thông tin quản lý khác");
                    } else {
                        dao.delete(maNV);
                        this.fillToTableByQL();
                        JOptionPane.showMessageDialog(this, "Xóa thành công");
                        clearForm();
                        fillID();
                    }
                } else {
                    if (checkQuanLyCuoiCung() == 1) {
                        JOptionPane.showMessageDialog(this, "Không thể xóa khi chỉ còn duy nhất 1 tài khoản quản lý");
                    } else {
                        this.fillToTableByQL();
                        JOptionPane.showMessageDialog(this, "Cần điều chỉnh chức vụ trước khi xóa tài khoản");
                        clearForm();
                        fillID();
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Xóa thất bại.");
        }
    }

    int checkQuanLyCuoiCung() {
        int count = 0;
        List<NhanVien> list = dao.selectAll();
        for (NhanVien nhanVien : list) {
            if (nhanVien.isChucVu() == true) {
                count++;
            }
        }
        return count;
    }

    private void edit() {
        try {
            int maNV = (int) tblNhanVien.getValueAt(this.row, 0);
            List<NhanVien> model = dao.selectByID(maNV);
            if (model != null) {
                setForm(model.get(0));
                txtPassword.setEnabled(false);
                updateStatus();
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi truy vấn dữ liệu");
        }
    }

    private void updateStatus() {

        boolean Edit = (this.row >= 0);
        boolean first = (this.row == 0);
        boolean last = (this.row == tblNhanVien.getRowCount() - 1);

        txtMaNV.setEditable(!Edit);
        btnThem.setEnabled(!Edit);
        btnSua.setEnabled(Edit);
        btnXoa.setEnabled(Edit);

        if (!Auth.isManager()) {
            btnThem.setEnabled(false);
            btnXoa.setEnabled(false);
        }
    }

    private void chonAnh() {
        if (FileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = FileChooser.getSelectedFile();
            XImage.save(file); // lưu hình và thư mục logos
            ImageIcon icon = XImage.read(file.getName());
            Image image = icon.getImage();
            Image image2 = image.getScaledInstance(209, 190, Image.SCALE_SMOOTH);
            lblAnhThe.setToolTipText(file.getName());
            lblAnhThe.setIcon(new ImageIcon(image2));
        }
    }

    public void setHinhAnh(String path, JLabel hinh) {
        if (path != null) {
            ImageIcon icon = XImage.read(path);
            Image image = icon.getImage();
            Image image2 = image.getScaledInstance(209, 190, Image.SCALE_SMOOTH);
            hinh.setToolTipText(path);
            hinh.setIcon(new ImageIcon(image2));
        } else {
            hinh.setIcon(null);
        }
    }

    boolean checkForm() {
        List<NhanVien> list = dao.selectAll();
        boolean check = true;
        String EMAIL_REGEX = "^[A-Za-z0-9]+[A-Za-z0-9]*@[A-Za-z0-9]+(\\.[A-Za-z0-9]+)+$";
        String PHONE_NUMBER_REGEX = "0{1}[0-9]{9}";
        String DATE_REGEX = "^\\d{4}\\-(0?[1-9]|1[012])\\-(0?[1-9]|[12][0-9]|3[01])$";
        String CCCD_REGEX = "[0-9]{12}";

        if (txtCCCD.getText().isBlank() || txtDienThoai.getText().isBlank() || txtEmail.getText().isBlank()
                || txtHoTen.getText().isBlank() || txtMaNV.getText().isBlank() || txtUsername.getText().isBlank()) {
            check = check && false;
            JOptionPane.showMessageDialog(this, "Vui lòng điền đầy đủ thông tin.");

        } else {
            check = check && true;
        }

        //check ID NV is int   //check ID tồn tại   //check ID > 0
        try {
            lblErrIDNhanVien.setForeground(Color.white);
            if (Float.parseFloat(txtMaNV.getText()) <= 0) {
                lblErrIDNhanVien.setForeground(Color.red);
                lblErrIDNhanVien.setText("Nhập mã nhân viên lớn 0");
                check = check && false;
            }
        } catch (NumberFormatException e) {
            new PrintException(e);
            lblErrIDNhanVien.setText("Mã nhân viên kiểu số");
            lblErrIDNhanVien.setForeground(Color.red);
            check = check && false;
        }
        //check sdt 10 số
        if (!txtDienThoai.getText().matches(PHONE_NUMBER_REGEX)) {
            lblErrSDT.setForeground(Color.red);
            lblErrSDT.setText("Vui lòng nhập đúng số điện thoại gồm 10 số");
            check = check && false;
        } else {
            lblErrSDT.setForeground(Color.white);
            lblErrSDT.setText("");
            check = check && true;
        }
        //check Email đúng định dạng
        if (!txtEmail.getText().matches(EMAIL_REGEX)) {
            lblErrEmail.setForeground(Color.red);
            lblErrEmail.setText("Vui lòng nhập đúng định dạng email");
            check = check && false;
        } else {
            lblErrEmail.setForeground(Color.white);
            lblErrEmail.setText("");
            check = check && true;
        }
        //check ngày sinh đúng định dạng
//        if (!txtNgaySinh.get().matches(DATE_REGEX)) {
//            lblErrNgaySinh.setForeground(Color.red);
//            lblErrNgaySinh.setText("Vui lòng nhập ngày sinh theo định dạng yyyy-MM-dd");
//            check = check && false;
//        } else {
//            lblErrNgaySinh.setForeground(Color.white);
//            lblErrNgaySinh.setText("");
//            check = check && true;
//        }

        //check CCCD đúng định dạng
        if (!txtCCCD.getText().matches(CCCD_REGEX)) {
            lblErrCCCD.setForeground(Color.red);
            lblErrCCCD.setText("Vui lòng nhập CCCD gồm 12 số");
            check = check && false;
        } else {
            lblErrCCCD.setForeground(Color.white);
            lblErrCCCD.setText("");
            check = check && true;
        }

        int countUser = 0;
        for (NhanVien nhanVien : list) {
            if (txtUsername.getText().equalsIgnoreCase(nhanVien.getUsername())) {
                countUser++;
                break;
            }
        }

        System.out.println("countUser" + countUser);
        if (countUser == 1) {
            check = check && false;
            lblErrUsername.setText("Username đã tồn tại");
            lblErrUsername.setForeground(Color.red);
        } else {
            lblErrUsername.setForeground(Color.white);
            lblErrUsername.setText("");
            check = check && true;
        }

        int countEmail = 0;
        for (NhanVien nhanVien : list) {
            if (txtEmail.getText().equalsIgnoreCase(nhanVien.getEmail())) {
                countEmail++;
                break;
            }
        }
        if (countEmail == 1) {
            check = check && false;
            lblErrEmail.setText("Email đã tồn tại");
            lblErrEmail.setForeground(Color.red);
        } else {
            lblErrEmail.setForeground(Color.white);
            lblErrEmail.setText("");
            check = check && true;
        }

        return check;
    }

    boolean checkFormUP() {
        List<NhanVien> list = dao.selectAll();
        boolean check = true;
        String EMAIL_REGEX = "^[A-Za-z0-9]+[A-Za-z0-9]*@[A-Za-z0-9]+(\\.[A-Za-z0-9]+)+$";
        String PHONE_NUMBER_REGEX = "0{1}[0-9]{9}";
        String DATE_REGEX = "^\\d{4}\\-(0?[1-9]|1[012])\\-(0?[1-9]|[12][0-9]|3[01])$";
        String CCCD_REGEX = "[0-9]{12}";

        if (txtCCCD.getText().isBlank() || txtDienThoai.getText().isBlank() || txtEmail.getText().isBlank()
                || txtHoTen.getText().isBlank() || txtMaNV.getText().isBlank() || txtUsername.getText().isBlank()) {
            check = check && false;
            JOptionPane.showMessageDialog(this, "Vui lòng điền đầy đủ thông tin.");

        } else {
            check = check && true;
        }

        //check ID NV is int   //check ID tồn tại   //check ID > 0
        try {
            lblErrIDNhanVien.setForeground(Color.white);
            if (Float.parseFloat(txtMaNV.getText()) <= 0) {
                lblErrIDNhanVien.setForeground(Color.red);
                lblErrIDNhanVien.setText("Nhập mã nhân viên lớn 0");
                check = check && false;
            }
        } catch (NumberFormatException e) {
            new PrintException(e);
            lblErrIDNhanVien.setText("Mã nhân viên kiểu số");
            lblErrIDNhanVien.setForeground(Color.red);
            check = check && false;
        }
        //check sdt 10 số
        if (!txtDienThoai.getText().matches(PHONE_NUMBER_REGEX)) {
            lblErrSDT.setForeground(Color.red);
            lblErrSDT.setText("Vui lòng nhập đúng số điện thoại gồm 10 số");
            check = check && false;
        } else {
            lblErrSDT.setForeground(Color.white);
            lblErrSDT.setText("");
            check = check && true;
        }
        //check Email đúng định dạng
        if (!txtEmail.getText().matches(EMAIL_REGEX)) {
            lblErrEmail.setForeground(Color.red);
            lblErrEmail.setText("Vui lòng nhập đúng định dạng email");
            check = check && false;
        } else {
            lblErrEmail.setForeground(Color.white);
            lblErrEmail.setText("");
            check = check && true;
        }
        //check ngày sinh đúng định dạng
//        if (!txtNgaySinh.get().matches(DATE_REGEX)) {
//            lblErrNgaySinh.setForeground(Color.red);
//            lblErrNgaySinh.setText("Vui lòng nhập ngày sinh theo định dạng yyyy-MM-dd");
//            check = check && false;
//        } else {
//            lblErrNgaySinh.setForeground(Color.white);
//            lblErrNgaySinh.setText("");
//            check = check && true;
//        }

        //check CCCD đúng định dạng
        if (!txtCCCD.getText().matches(CCCD_REGEX)) {
            lblErrCCCD.setForeground(Color.red);
            lblErrCCCD.setText("Vui lòng nhập CCCD gồm 12 số");
            check = check && false;
        } else {
            lblErrCCCD.setForeground(Color.white);
            lblErrCCCD.setText("");
            check = check && true;
        }

        int countUser = 0;
        for (NhanVien nhanVien : list) {
            for (int i = 0; i < 10; i++) {
                
            }
            if (txtUsername.getText().equalsIgnoreCase(nhanVien.getUsername())) {
                countUser++;
            } else if (txtUsername.getText().equalsIgnoreCase(nhanVien.getUsername()) && (tblNhanVien.getValueAt(tblNhanVien.getSelectedRow(), 8).equals(txtUsername.getText()))) {
                countUser =0;
            }
        }

        if (countUser != 0) {
            check = check && false;
            lblErrUsername.setText("Username đã tồn tại");
            lblErrUsername.setForeground(Color.red);
        } else {
            lblErrUsername.setForeground(Color.white);
            lblErrUsername.setText("");
            check = check && true;
        }

        int countEmail = 0;
        for (NhanVien nhanVien : list) {
            if (txtEmail.getText().equalsIgnoreCase(nhanVien.getEmail())) {
                countEmail++;
                break;
            }
        }
        if (countEmail == 1) {
            check = check && false;
            lblErrEmail.setText("Email đã tồn tại");
            lblErrEmail.setForeground(Color.red);
        } else {
            lblErrEmail.setForeground(Color.white);
            lblErrEmail.setText("");
            check = check && true;
        }

        return check;
    }

    private void setForRole() {
        try {
            int idNV = Auth.user.getMaNV();
            if (Auth.isManager()) {
                fillToTableByQL();
                updateStatus();
            } else {
                fillToTableByNV(idNV);
                updateStatus();
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi truy vấn dữ liệu");
        }
    }

    private void fillID() {
        List<NhanVien> list = dao.selectAll();
        for (NhanVien kh : list) {
            for (int i = list.size(); i < list.size() + 1; i++) {
                txtMaNV.setText(String.valueOf(kh.getMaNV() + 1));
            }
        }
    }
//    private void editButtonForRole() {
//        if (!Auth.isManager()) {
//            btnThem.setEnabled(false);
//            btnSua.setEnabled(false);
//            btnXoa.setEnabled(false);
//            btnTim.setEnabled(false);
//            btnXoa.setEnabled(true);
//        } else {
//            btnThem.setEnabled(true);
//            btnSua.setEnabled(true);
//            btnXoa.setEnabled(true);
//            btnTim.setEnabled(true);
//            btnMoi.setEnabled(true);
//        }
//    }

}
